%% -*- erlang -*-
{application, py,
 [%% A quick description of the application.
  {description, "Distributed Python for the Erlang Ecosystem"},

  %% The version of the application
  {vsn, "0.0.5"},

  %% All modules used by the application.
  {modules,
   ['py-app',
    'py-config',
    'py-logger',
    'py-sched',
    'py-sup',
    'py-util',
    py
   ]},

  %% All of the registered names the application uses. This can be ignored.
  {registered, ['py-sup']},

  %% Applications that are to be started prior to this one. This can be ignored
  %% leave it alone unless you understand it well and let the .rel files in
  %% your release handle this.
  {applications, [kernel, stdlib]},
  {mod, {'py-app', []}},
  %% OTP application loader will load, but not start, included apps. Again
  %% this can be ignored as well.  To load but not start an application it
  %% is easier to include it in the .rel file followed by the atom 'none'
  {included_applications, []},

  %% configuration parameters similar to those in the config file specified
  %% on the command line. can be fetched with application:get_env
  {env, [%% LFE py Configuration
         {'log-level', error},
         %% ErlPort Configuration
         {'python-path', "./python:./deps/erlport/priv/python3"},
         %% Supervisor Configuration
         {'erlport-max-restarts', 3},
         {'erlport-restart-threshold', 1},
         {'erlport-shutdown-timeout', 2000},
         %% Python Server Configuration
         {'worker-count', 3},
         {'worker-on-start', {py, 'on-startworker'}},
         %% Python Server Scheduler Configuration
         {'scheduler-mod', 'py-sched'},
         {'scheduler-func', 'least-reductions'}
         ]}
 ]}.
